---
import "../styles/global.css";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import Giscus from "../components/Giscus.astro";

interface Frontmatter {
  title: string;
  description: string;
  pubDate: Date;
  updatedDate?: Date;
  tags: string[];
}
const { title, description, pubDate, updatedDate, tags } = Astro.props as Frontmatter;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{title} | Shuvo’s Notes</title>

    <!-- Basic Meta -->
    <meta name="description" content={description} />
    <meta name="keywords" content={tags?.join(", ")} />

    <!-- Open Graph -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={`/og/${Astro.url.pathname.split('/').filter(Boolean).pop()}.png`} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />

    <!-- Canonical -->
    <link rel="canonical" href={new URL(Astro.url.pathname, Astro.site)} />

    <!-- KaTeX Styles -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css"
      integrity="sha384-yF2FqZkVQvGv8sU6sYxE/0H2Jf9W7G4m1nQqR2If1mQxBvQxw9S9WwZ3/NjZC0ay"
      crossorigin="anonymous"
    />

    <!-- Theme Script -->
    <script is:inline>
      !function(){
        try {
          var t = localStorage.getItem('theme');
          if (t) {
            document.documentElement.classList.toggle('dark', t === 'dark')
          } else {
            document.documentElement.classList.toggle('dark', window.matchMedia('(prefers-color-scheme: dark)').matches)
          }
        } catch(e) {}
      }();
    </script>

    <!-- JSON-LD Article Schema -->
    <script type="application/ld+json" is:inline>
      {JSON.stringify({
        "@context": "https://schema.org",
        "@type": "BlogPosting",
        "headline": title,
        "description": description,
        "datePublished": pubDate,
        "dateModified": updatedDate ?? pubDate,
        "mainEntityOfPage": new URL(Astro.url.pathname, Astro.site),
        "articleSection": tags
      })}
    </script>
  </head>
  <body class="max-w-3xl mx-auto px-4">
    <Header />
    <main class="prose prose-neutral dark:prose-invert max-w-none pt-8 md:pt-10 lg:pt-12" role="main">
      <a href="/" class="inline-block mb-3 text-sm hover:underline">← Home</a>

      <h1>{title}</h1>
      <p class="!mt-0 text-sm opacity-70">
        {new Date(pubDate).toDateString()}
        {updatedDate && ` • Updated ${new Date(updatedDate).toDateString()}`}
      </p>

      <div class="mt-2 flex flex-wrap gap-2">
        {tags?.map(t => (
          <a href={`/tags/${t}`} class="text-xs px-2 py-1 border rounded">{t}</a>
        ))}
      </div>

      <slot />

      <Giscus />
    </main>
    <Footer />
  </body>
</html>